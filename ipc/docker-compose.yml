services:
  fendermint:
    image: ${FENDERMINT_IMAGE}
    user: "root"
    environment:
      LOG_LEVEL: "info"
      FM_TENDERMINT_RPC_URL: "http://cometbft:26657"
      FM_RESOLVER__CONNECTION__LISTEN_ADDR: "/ip4/0.0.0.0/tcp/26659"
      FM_CONFIG_DIR: "/fendermint/config"
      FM_ABCI__LISTEN__HOST: "0.0.0.0"
      FM_ABCI__LISTEN__PORT: "26658"
      FM_RESOLVER__NETWORK__LOCAL_KEY: "/fendermint/keys/fendermint.sk"
      FM_VALIDATOR_KEY__PATH: "/fendermint/keys/validator.sk"
      FM_VALIDATOR_KEY__KIND: "ethereum"
      FM_SNAPSHOTS__ENABLED: "true"
      FM_IPC__TOPDOWN__CHAIN_HEAD_DELAY: "10"
      FM_IPC__TOPDOWN__EXPONENTIAL_BACK_OFF: "5"
      FM_IPC__TOPDOWN__EXPONENTIAL_RETRY_LIMIT: "5"
      FM_IPC__TOPDOWN__POLLING_INTERVAL: "10"
      FM_IPC__TOPDOWN__PROPOSAL_DELAY: "2"
      FM_IPC__TOPDOWN__MAX_PROPOSAL_RANGE: "100"
      FM_METRICS__ENABLED: "true"
      FM_METRICS__LISTEN__HOST: "0.0.0.0"
      FM_METRICS__LISTEN__PORT: "26670"
    labels:
      prometheus_instance: "${FLUENCE_INSTANCE_ID}"
      prometheus_port: "26670"
      prometheus_job: "fendermint"
      prometheus_scrape: "true"
    env_file:
      - .env
    expose:
      - 26659 # p2p
      - 26658 # abci
      - 26670 # metrics
    ports:
      - "26659:26659" # p2p
    volumes:
      - ./fendermint/snapshots:/fendermint/snapshots
      - ./fendermint/data:/fendermint/data
      - ./keys:/fendermint/keys

  cometbft:
    image: ${COMETBFT_IMAGE}
    user: "root"
    environment:
      CMT_LOG_LEVEL: "info"
      CMT_LOG_FORMAT: "plain"
      CMT_NODE_KEY_FILE: "/cometbft/keys/node_key.json"
      CMT_GENESIS_FILE: "/cometbft/config/genesis.json"
      CMT_PRIV_VALIDATOR_KEY_FILE: "/cometbft/keys/priv_validator_key.json"
      CMT_PRIV_VALIDATOR_STATE_FILE: "/cometbft/data/priv_validator_key_state.json"
      CMT_DB_DIR: "/cometbft/data/db"
      CMT_PROXY_APP: "tcp://fendermint:26658"
      CMT_P2P_LADDR: "tcp://0.0.0.0:26656"
      CMT_RPC_LADDR: "tcp://0.0.0.0:26657"
      CMT_P2P_PEX: "true"
      CMT_P2P_SEED_MODE: "false"
      CMT_P2P_ADDR_BOOK_FILE: "/cometbft/data/addrbook.json"
      CMT_P2P_ADDR_BOOK_STRICT: "true"
      CMT_STATESYNC_ENABLE: "true"
      CMT_CONSENSUS_CREATE_EMPTY_BLOCKS: "true"
      CMT_CONSENSUS_CREATE_EMPTY_BLOCKS_INTERVAL: "10s"
      CMT_CONSENSUS_TIMEOUT_COMMIT: "10s"
      CMT_INSTRUMENTATION_PROMETHEUS: "true"
      CMT_INSTRUMENTATION_PROMETHEUS_LISTEN_ADDR: "0.0.0.0:26671"
    labels:
      prometheus_instance: "${FLUENCE_INSTANCE_ID}"
      prometheus_port: "26671"
      prometheus_job: "cometbft"
      prometheus_scrape: "true"
    env_file:
      - .env
    expose:
      - 26657 # rpc
      - 26656 # p2p
      - 26671 # metrics
    ports:
      - "26656:26656" # p2p
    volumes:
      - ./cometbft/data:/cometbft/data
      - ./cometbft/config:/cometbft/config
      - ./keys:/cometbft/keys
    healthcheck:
      test: curl --fail http://localhost:26657 || exit 1
      interval: 8s
      timeout: 10s
      retries: 20
    depends_on:
      - fendermint

  eth-api:
    image: ${FENDERMINT_IMAGE}
    environment:
      FM_NETWORK: testnet
      TENDERMINT_RPC_URL: "http://cometbft:26657"
      TENDERMINT_WS_URL: "ws://cometbft:26657/websocket"
    labels:
      instance: ${FLUENCE_INSTANCE_ID}
    command: "eth run"
    ports:
      - "8545:8545"
    healthcheck:
      test: |
        curl --fail -s -X POST 'http://localhost:8545' -H 'Content-Type: application/json' \
        --data '{"jsonrpc":"2.0", "method":"eth_chainId", "params":[], "id":1}' || exit 1
      interval: 8s
      timeout: 10s
      retries: 20
    depends_on:
      cometbft:
        condition: service_healthy

  prometheus:
    profiles:
      - observability
    image: prom/prometheus
    user: root
    command:
      - "--config.file=/configs/prometheus.yml"
      - "--web.enable-lifecycle"
      - "--enable-feature=agent,expand-external-labels"
      - "--storage.agent.path=/data"
    ports:
      - 9090:9090
    volumes:
      - ./observability/:/configs
      - prometheus:/data
      - /var/run/docker.sock:/var/run/docker.sock
    env_file:
      - .env

  promtail:
    profiles:
      - observability
    image: grafana/promtail:2.9.5
    user: root
    command:
      - "-config.file=/configs/promtail.yml"
      - "-config.expand-env=true"
    volumes:
      - ./observability/:/configs
      - promtail:/data
      - /var/lib/docker/containers:/var/lib/docker/containers
      - /var/run/docker.sock:/var/run/docker.sock
    env_file:
      - .env

volumes:
  prometheus:
  promtail:
