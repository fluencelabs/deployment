- name: Setup and configure VM with libvirt and bridge interface
  hosts: all
  become: yes

  tasks:
    - name: Gather facts
      setup:

    - name: Set vm_cores to the number of logical cores
      set_fact:
        vm_cores: "{{ ansible_processor_vcpus }}"

    - name: Install libvirt on Debian-based systems
      apt:
        name: libvirt-daemon-system
        state: present
      when: ansible_os_family == 'Debian'

    # - name: Install libvirt on RPM-based systems
    #   yum:
    #     name: libvirt
    #     state: present
    #   when: ansible_os_family == 'RedHat'

    - name: Install virsh on Debian-based systems
      apt:
        name: qemu-kvm
        state: present
      when: ansible_os_family == 'Debian'

    # - name: Install virsh on RPM-based systems
    #   yum:
    #     name: libvirt-client
    #     state: present
    #   when: ansible_os_family == 'RedHat'

    - name: Install bridge-utils on Debian-based systems
      apt:
        name: bridge-utils
        state: present
      when: ansible_os_family == 'Debian'

    # - name: Install bridge-utils on RPM-based systems
    #   yum:
    #     name: bridge-utils
    #     state: present
    #   when: ansible_os_family == 'RedHat'

    - name: Create bridge interface br422442
      command: brctl addbr {{ bridge_name }}
      args:
        creates: /sys/class/net/{{ bridge_name }}

    - name: Add physical interface to the bridge
      command: brctl addif {{ bridge_name }} {{ physical_iface }}
      when: "physical_iface in ansible_facts.interfaces"
      ignore_errors: yes

    - name: Bring up the bridge interface
      command: ip link set {{ bridge_name }} up
      when: "bridge_name not in ansible_facts.interfaces"

    - name: Bring up the physical interface
      command: ip link set {{ physical_iface }} up

    - name: Download VM image from S3
      amazon.aws.aws_s3:
        bucket: "{{ s3_bucket }}"
        object: "{{ s3_key }}"
        dest: "{{ vm_image_path }}"
        mode: get
      ignore_errors: yes # TBD

    - name: Create sandbox.xml from template
      template:
        src: sandbox.xml.j2
        dest: /tmp/sandbox.xml

    - name: Ensure a simple VM is defined
      command: >
        virsh define /tmp/sandbox.xml
      args:
        creates: /etc/libvirt/qemu/{{ vm_name }}.xml
      notify: restart libvirtd

    - name: Enable VM autostart
      command: virsh autostart {{ vm_name }}

    - name: Start the VM
      command: virsh start {{ vm_name }}

    - name: Call HTTP service at localhost
      command: curl http://localhost:18080/peer_id 
      register: localhost_response

    - name: Print response from localhost HTTP service
      debug:
        var: localhost_response.stdout

    # - name: Call HTTP service on a remote host
    #   command: curl http://{{ remote_host }}
    #   vars:
    #     remote_host: "192.168.1.100"
    #   register: remotehost_response

    # - name: Print response from remote host HTTP service
    #   debug:
    #     var: remotehost_response.stdout

  handlers:
    - name: restart libvirtd
      service:
        name: libvirtd
        state: restarted